import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';

class AddRequire extends StatefulWidget {
  const AddRequire({Key? key}) : super(key: key);

  @override
  State<AddRequire> createState() => _AddRequireState();
}

class _AddRequireState extends State<AddRequire> {
  final TextEditingController _controllerName = TextEditingController();
  final TextEditingController _controllerQuantity = TextEditingController();
  final TextEditingController _controllerLocation = TextEditingController();

  GlobalKey<FormState> key = GlobalKey();

  CollectionReference required =
      FirebaseFirestore.instance.collection('required');
  CollectionReference dates = FirebaseFirestore.instance.collection('dates');

  late DateTime startDate = DateTime.now();
  late DateTime endDate = DateTime.now();

  Future<void> _selectDate(BuildContext context, bool isStartDate) async {
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime.now()
          .add(const Duration(days: 365)), // Adjust the range as needed
    );

    if (pickedDate != null) {
      setState(() {
        // Set the respective start or end date
        if (isStartDate) {
          startDate = pickedDate;
        } else {
          endDate = pickedDate;
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(15),
          child: Form(
            key: key,
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.only(top: 50),
                  child: TextFormField(
                    style: GoogleFonts.barlowSemiCondensed(
                        color: const Color(0xffCDFF01)),
                    controller: _controllerName,
                    decoration: InputDecoration(
                      labelText: "Food Item Name",
                      labelStyle: GoogleFonts.barlowSemiCondensed(
                          color: const Color(0xffCDFF01)),
                      hintStyle: GoogleFonts.barlowSemiCondensed(
                          color: Colors.white,
                          fontWeight:
                              FontWeight.w500), // Adjust opacity as needed
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10),
                        borderSide:
                            BorderSide(color: Colors.white.withOpacity(0.25)),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10),
                        borderSide: const BorderSide(color: Color(0xffCDFF01)),
                      ),
                    ),
                  ),
                ),
                const SizedBox(
                  height: 10,
                ),
                TextFormField(
                  style: GoogleFonts.barlowSemiCondensed(
                      color: const Color(0xffCDFF01)),
                  controller: _controllerQuantity,
                  decoration: InputDecoration(
                    labelText: "Quantity",
                    labelStyle: GoogleFonts.barlowSemiCondensed(
                        color: const Color(0xffCDFF01)),
                    hintStyle: GoogleFonts.barlowSemiCondensed(
                        color: Colors.white,
                        fontWeight:
                            FontWeight.w500), // Adjust opacity as needed
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide:
                          BorderSide(color: Colors.white.withOpacity(0.25)),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide: const BorderSide(color: Color(0xffCDFF01)),
                    ),
                  ),
                ),
                const SizedBox(
                  height: 10,
                ),
                TextFormField(
                  style: GoogleFonts.barlowSemiCondensed(
                      color: const Color(0xffCDFF01)),
                  controller: _controllerLocation,
                  decoration: InputDecoration(
                    labelText: "Location",
                    labelStyle: GoogleFonts.barlowSemiCondensed(
                        color: const Color(0xffCDFF01)),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide:
                          BorderSide(color: Colors.white.withOpacity(0.25)),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10),
                      borderSide: const BorderSide(color: Color(0xffCDFF01)),
                    ),
                  ),
                ),
                const SizedBox(
                  height: 20,
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton(
                      onPressed: () {
                        _selectDate(context, true);
                      },
                      child: const Text(
                        'Select Start Date',
                        style: TextStyle(color: Colors.black),
                      ),
                      style: ElevatedButton.styleFrom(
                        primary: const Color(0xffCDFF01),
                      ),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        _selectDate(context, false);
                      },
                      child: const Text(
                        'Select End Date',
                        style: TextStyle(color: Colors.black),
                      ),
                      style: ElevatedButton.styleFrom(
                        primary: const Color(0xffCDFF01),
                      ),
                    ),
                  ],
                ),
                SizedBox(
                  height: 60,
                  width: 380,
                  child: FloatingActionButton.extended(
                    onPressed: () async {
                      if (key.currentState!.validate()) {
                        String itemName = _controllerName.text;
                        String itemQuantity = _controllerQuantity.text;
                        String itemLocation = _controllerLocation.text;

                        // Calculate the dates between startDate and endDate
                        List<String> datesBetween = [];
                        for (int i = 0;
                            i <= endDate.difference(startDate).inDays;
                            i++) {
                          DateTime dateToAdd = startDate.add(Duration(days: i));
                          String formattedDate =
                              DateFormat('yyyy-MM-dd').format(dateToAdd);

                          // Add the document to the "dates" collection
                          await dates.doc(formattedDate).set({
                            'name': itemName,
                            'quantity': itemQuantity,
                            'location': itemLocation,
                            'timestamp': FieldValue.serverTimestamp(),
                          });

                          datesBetween.add(formattedDate);
                        }

                        // Add the document to the "required" collection
                        await required.add({
                          'name': itemName,
                          'quantity': itemQuantity,
                          'location': itemLocation,
                          'dates': datesBetween,
                          'timestamp': FieldValue.serverTimestamp(),
                        });

                        Navigator.pop(context);
                      }
                    },
                    label: const Text(
                      'Upload',
                      style: TextStyle(
                          color: Colors.black, fontWeight: FontWeight.w500),
                    ),
                    backgroundColor: const Color(0xffCDFF01),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}





import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fooddon/distributor/addrequire.dart';
import 'package:fooddon/donor/donorcharity.dart';
import 'package:google_fonts/google_fonts.dart';
import '../home.dart';

class Catalog extends StatefulWidget {
  const Catalog({Key? key}) : super(key: key);

  @override
  State<Catalog> createState() => _CatalogState();
}

class _CatalogState extends State<Catalog> with TickerProviderStateMixin {
  late TabController _tabController;
  final CollectionReference item =
      FirebaseFirestore.instance.collection('required');

  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _contributionController = TextEditingController();

  String _searchLocation = "";

  // Function to show the bottom sheet
  void _showContributionBottomSheet(
      BuildContext context, Map<String, dynamic> item) {
    showModalBottomSheet(
      backgroundColor: Colors.black,
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return Container(
              height: 400,
              padding: const EdgeInsets.all(16),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Name: ${item['name']}',
                    style: GoogleFonts.barlowSemiCondensed(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.w600),
                  ),
                  Text(
                    'Quantity: ${item['quantity']}',
                    style: GoogleFonts.barlowSemiCondensed(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.w600),
                  ),
                  Text(
                    'Expiry: ${item['expiry']}',
                    style: GoogleFonts.barlowSemiCondensed(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.w600),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 20, bottom: 20),
                    child: TextField(
                      style:
                          GoogleFonts.barlowSemiCondensed(color: Colors.white),
                      controller: _contributionController,
                      keyboardType: TextInputType.number,
                      decoration: InputDecoration(
                        labelText: 'Contribution Quantity',
                        labelStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white),
                        hintStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                    ),
                  ),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xffCDFF01),
                        elevation: 0,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10))),
                    onPressed: () {
                      // Perform contribution logic here
                      int contributedQuantity =
                          int.tryParse(_contributionController.text) ?? 0;

                      int itemQuantity =
                          int.tryParse(item['quantity'].toString()) ?? 0;

                      // Update the quantity in the catalog page
                      int remainingQuantity =
                          itemQuantity - contributedQuantity;

                      if (remainingQuantity > 0) {
                        // If remaining quantity is greater than 0, update the item
                        // in the catalog with the new quantity
                        FirebaseFirestore.instance
                            .collection('required')
                            .doc(item['id'])
                            .update({'quantity': remainingQuantity});
                      } else {
                        // If remaining quantity is 0 or less, delete the item from the catalog
                        FirebaseFirestore.instance
                            .collection('required')
                            .doc(item['id'])
                            .delete();
                      }

                      _contributionController.text = "";

                      // Close the bottom sheet
                      Navigator.pop(context);
                    },
                    child: Text(
                      'Contribute',
                      style: GoogleFonts.barlowSemiCondensed(
                          color: Colors.black, fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _tabController.addListener(_handleTabSelection);
  }

  void _handleTabSelection() {
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        backgroundColor: Colors.black,
        appBar: AppBar(
          toolbarHeight: 80,
          leading: IconButton(
            icon: const Icon(
              Icons.arrow_back,
              color: Colors.white,
            ),
            onPressed: () {
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(
                  builder: (context) => const HomeScreen(),
                ),
              );
            },
          ),
          elevation: 0,
          title: Text(
            'Fooddon',
            style: GoogleFonts.barlowSemiCondensed(
              color: const Color(0xffCDFF01),
              fontSize: 27,
              fontWeight: FontWeight.bold,
            ),
          ),
          backgroundColor: Colors.black,
          bottom: TabBar(
            labelStyle: GoogleFonts.barlowSemiCondensed(
                color: const Color(0xffCDFF01), fontWeight: FontWeight.bold),
            controller: _tabController,
            tabs: const [
              Tab(text: 'Breakfast'),
              Tab(text: 'Lunch'),
              Tab(text: 'Dinner'),
            ],
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.only(top: 10, left: 10, right: 10),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextField(
                controller: _searchController,
                style: GoogleFonts.barlowSemiCondensed(color: Colors.white),
                decoration: InputDecoration(
                  hintText: 'Enter your location...',
                  hintStyle:
                      GoogleFonts.barlowSemiCondensed(color: Colors.white),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                onChanged: (value) {
                  setState(() {
                    _searchLocation =
                        value; // Update the searchLocation variable
                  });
                },
              ),
              const SizedBox(height: 10),
              Expanded(
                child: TabBarView(
                  controller: _tabController,
                  children: [
                    _buildItemList('Breakfast'),
                    _buildItemList('Lunch'),
                    _buildItemList('Dinner'),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildItemList(String itemName) {
    return StreamBuilder(
      stream: item.orderBy('timestamp', descending: true).snapshots(),
      builder: (context, AsyncSnapshot snapshot) {
        if (snapshot.hasError) {
          return Center(
            child: Text('Some error occurred ${snapshot.error}'),
          );
        }
        if (snapshot.hasData) {
          QuerySnapshot querySnapshot = snapshot.data;
          List<QueryDocumentSnapshot> documents = querySnapshot.docs;

          List<Map<String, dynamic>> items = documents.map((e) {
            Map<String, dynamic> data = e.data() as Map<String, dynamic>;
            data['id'] = e.id; // Add the document ID to the data
            return data;
          }).toList();

          items = items.where((item) => item['name'] == itemName).toList();

          // Filter items based on the search location
          items = items.where((item) {
            return item['location']
                .toLowerCase()
                .contains(_searchLocation.toLowerCase());
          }).toList();

          if (items.isEmpty && _searchLocation.isNotEmpty) {
            Future.delayed(Duration.zero, () {
              _showNoDistributorsDialog(context);
            });
          }

          return ListView.builder(
            itemCount: items.length,
            itemBuilder: (context, index) {
              Map<String, dynamic> thisItem = items[index];
              List<String> dates = List<String>.from(thisItem['dates'] ?? []);

              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: dates.map((date) {
                  return Padding(
                    padding: const EdgeInsets.only(bottom: 10),
                    child: Row(
                      children: [
                        // Container with logo
                        Container(
                          width: 50,
                          height: 80,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            shape: BoxShape.rectangle,
                            color: const Color(0xffCDFF01),
                          ),
                          child:
                              const Icon(Icons.restaurant, color: Colors.black),
                        ),
                        const SizedBox(width: 10),
                        // List tile
                        Container(
                          height: 80,
                          width: MediaQuery.of(context).size.width - 80,
                          decoration: BoxDecoration(
                            border: Border.all(
                              color: Colors.white.withOpacity(0.25),
                              width: 1,
                            ),
                            borderRadius:
                                const BorderRadius.all(Radius.circular(10)),
                            color: Colors.black.withOpacity(0.07),
                          ),
                          child: ListTile(
                            horizontalTitleGap: 25,
                            titleTextStyle: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                            leadingAndTrailingTextStyle:
                                GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.w500,
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                                horizontal: 10, vertical: 3),
                            title: Text(
                              'Name: ${thisItem['name']}\nNeeded quantity: ${thisItem['quantity']}',
                            ),
                            subtitle: Padding(
                              padding: const EdgeInsets.only(top: 5),
                              child: Row(
                                children: [
                                  const Icon(
                                    Icons.location_on,
                                    color: const Color(0xffCDFF01),
                                    size: 12,
                                  ),
                                  const SizedBox(width: 5),
                                  Text('${thisItem['location']}'),
                                ],
                              ),
                            ),
                            subtitleTextStyle: GoogleFonts.barlowSemiCondensed(
                                color: Colors.white,
                                fontSize: 12,
                                fontWeight: FontWeight.w400),
                            trailing: Text('Date: $date'),
                            onTap: () {
                              _showContributionBottomSheet(context, thisItem);
                            },
                          ),
                        ),
                      ],
                    ),
                  );
                }).toList(),
              );
            },
          );
        }
        return Container();
      },
    );
  }
}

void _showNoDistributorsDialog(BuildContext context) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text(
          'No distributors found',
          style: GoogleFonts.barlowSemiCondensed(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Text(
          'Don\'t worry if your location doesn\'t have any distributors. You can contribute for charity.',
          style: GoogleFonts.barlowSemiCondensed(
            color: Colors.black,
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        ),
        actions: <Widget>[
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close the dialog
            },
            child: Text(
              'Cancel',
              style: GoogleFonts.barlowSemiCondensed(
                color: Colors.redAccent,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close the dialog
              // Navigate to the charity contribution page
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => CharityContributionPage(),
                ),
              );
            },
            child: Text(
              'Contribute for Charity',
              style: GoogleFonts.barlowSemiCondensed(
                color: Colors.black,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      );
    },
  );
}




void _showContributionBottomSheet(
      BuildContext context, Map<String, dynamic> item) {
    showModalBottomSheet(
      backgroundColor: Colors.black,
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return Container(
              height: 600,
              padding: const EdgeInsets.all(16),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Name: ${item['name']}',
                    style: GoogleFonts.barlowSemiCondensed(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.w600),
                  ),
                  Text(
                    'Quantity: ${item['quantity']}',
                    style: GoogleFonts.barlowSemiCondensed(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.w600),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 20, bottom: 10),
                    child: TextField(
                      style:
                          GoogleFonts.barlowSemiCondensed(color: Colors.white),
                      controller: _donorNameController,
                      keyboardType: TextInputType.number,
                      decoration: InputDecoration(
                        labelText: 'Name',
                        labelStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white),
                        hintStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 10, bottom: 10),
                    child: TextField(
                      style:
                          GoogleFonts.barlowSemiCondensed(color: Colors.white),
                      controller: _donorNumberController,
                      keyboardType: TextInputType.number,
                      decoration: InputDecoration(
                        labelText: 'Phone number',
                        labelStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white),
                        hintStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 10, bottom: 20),
                    child: TextField(
                      style:
                          GoogleFonts.barlowSemiCondensed(color: Colors.white),
                      controller: _contributionController,
                      keyboardType: TextInputType.number,
                      decoration: InputDecoration(
                        labelText: 'Contribution Quantity',
                        labelStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white),
                        hintStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                    ),
                  ),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xffCDFF01),
                        elevation: 0,
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10))),
                    onPressed: () async {
                      // Perform contribution logic here
                      int contributedQuantity =
                          int.tryParse(_contributionController.text) ?? 0;

                      int itemQuantity =
                          int.tryParse(item['quantity'].toString()) ?? 0;

                      // Update the quantity in the catalog page
                      int remainingQuantity =
                          itemQuantity - contributedQuantity;

                      if (remainingQuantity > 0) {
                        // If remaining quantity is greater than 0, update the item
                        // in the catalog with the new quantity
                        await FirebaseFirestore.instance
                            .collection('required')
                            .doc(item['id'])
                            .update({'quantity': remainingQuantity});
                      } else {
                        // If remaining quantity is 0 or less, delete the item from the catalog
                        await FirebaseFirestore.instance
                            .collection('required')
                            .doc(item['id'])
                            .delete();
                      }

                      String userId = user!.uid;
                      String currentDate = DateTime.now().toIso8601String();

                      // Store donation information in Firestore with user ID as document ID
                      await donations
                          .doc(userId)
                          .collection('userdonations')
                          .add({
                        'userId': userId,
                        'donorName': _donorNameController,
                        'donorNumber': _donorNumberController,
                        'name': item['name'],
                        'contributedQuantity': contributedQuantity,
                        'location': item['location'],
                        'date': item['dates'],
                        'timestamp': FieldValue.serverTimestamp(),
                      });

                      _contributionController.text = "";

                      // Close the bottom sheet
                      Navigator.pop(context);
                    },
                    child: Text(
                      'Contribute',
                      style: GoogleFonts.barlowSemiCondensed(
                          color: Colors.black, fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }






  import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';

import 'distributorhome.dart';

class UserDonations extends StatefulWidget {
  const UserDonations({Key? key}) : super(key: key);

  @override
  State<UserDonations> createState() => _UserDonationsState();
}

class _UserDonationsState extends State<UserDonations> {
  User? user = FirebaseAuth.instance.currentUser;
  FirebaseFirestore firestore = FirebaseFirestore.instance;

  String users = 'users';
  Future<List<QueryDocumentSnapshot>> fetchAllDonations() async {
    try {
      QuerySnapshot querySnapshot = await FirebaseFirestore.instance
          .collectionGroup('userdonations')
          .get();

      List<QueryDocumentSnapshot> documents = querySnapshot.docs;

      print('Number of documents: ${documents.length}');

      for (QueryDocumentSnapshot document in documents) {
        print('Document ID: ${document.id}');
        print('Document data: ${document.data()}');
      }

      return documents;
    } catch (e) {
      print('Error fetching all donations: $e');
      return [];
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back,
            color: Colors.white,
          ),
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => const DistributorHome(),
              ),
            );
          },
        ),
        elevation: 0,
        title: Text(
          'Fooddon Distributor',
          style: GoogleFonts.barlowSemiCondensed(
            color: const Color(0xffCDFF01),
            fontSize: 27,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(10),
        child: FutureBuilder<List<DocumentSnapshot>>(
          future: fetchAllDonations(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }
            if (snapshot.hasError) {
              return Center(child: Text('Error: ${snapshot.error}'));
            }
            if (!snapshot.hasData || snapshot.data!.isEmpty) {
              return const Center(child: Text('No donations available.'));
            }

            snapshot.data!.forEach((doc) {
              print('Number of documents: ${snapshot.data!.length}');
              print('Document ID: ${doc.id}');
              print('Document data: ${doc.data()}');
            });

            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                final donations =
                    snapshot.data![index].data() as Map<String, dynamic>;
                final name = donations['name'] ?? 'N/A';
                final quantity = donations['contributedQuantity'] ?? 'N/A';
                final timestamp = donations['timestamp'];
                final location = donations['location'] ?? 'N/A';
                final donorName = donations['donorName'] ?? 'N/A';
                final donorPhone = donations['donorNumber'] ?? 'N/A';
                final date = donations['date'] ?? 'N/A';

                // Convert timestamp to DateTime object
                DateTime dateTime = (timestamp as Timestamp).toDate();
                // Format DateTime object to display only the date
                String formattedDate =
                    DateFormat('yyyy-MM-dd').format(dateTime);

                return Padding(
                  padding: const EdgeInsets.only(bottom: 10),
                  child: Container(
                    decoration: BoxDecoration(
                      borderRadius: const BorderRadius.all(Radius.circular(10)),
                      border: Border.all(
                        color: Colors.white.withOpacity(0.25),
                        width: 1,
                      ),
                    ),
                    child: SizedBox(
                      height: 100,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                          Text(
                            date,
                            style: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                            ),
                          ),
                          Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text(
                                donorName,
                                style: GoogleFonts.barlowSemiCondensed(
                                  color: Colors.white,
                                ),
                              ),
                              Text(
                                'Ph: $donorPhone',
                                style: GoogleFonts.barlowSemiCondensed(
                                  color: Colors.white,
                                ),
                              ),
                              Text(
                                '$name : $quantity',
                                style: GoogleFonts.barlowSemiCondensed(
                                  color: Colors.white,
                                ),
                              ),
                            ],
                          ),
                          Text(
                            location,
                            style: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }
}



import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:fooddon/donor/showdistributor.dart';
import 'package:fooddon/welcome.dart';
import 'package:google_fonts/google_fonts.dart';

class MainHome extends StatefulWidget {
  const MainHome({super.key});

  @override
  State<MainHome> createState() => _MainHomeState();
}

class _MainHomeState extends State<MainHome> {
  User? user = FirebaseAuth.instance.currentUser;
  void _signOut(BuildContext context) async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text(
          'Log out',
          style: TextStyle(
            color: Colors.black,
            fontSize: 32,
            fontWeight: FontWeight.w800,
          ),
        ),
        content: const Text(
          'Are you sure you want to log out?',
          style: TextStyle(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.w500,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              'Cancel',
              style: TextStyle(
                color: Colors.black,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
          TextButton(
            onPressed: () async {
              await FirebaseAuth.instance.signOut();

              Navigator.pushReplacement(
                context,
                MaterialPageRoute(
                  builder: (BuildContext context) => const Welcome(),
                ),
              );
            },
            child: const Text(
              'Log out',
              style: TextStyle(
                color: Colors.black,
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        title: Text(
          'Hi $user',
          style: GoogleFonts.barlowSemiCondensed(
              color: Colors.black, fontWeight: FontWeight.w500),
        ),
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            Stack(
              children: [
                Image.asset(
                  'assets/homeimage.png',
                  width: 600,
                  height: 600,
                  fit: BoxFit.cover,
                ),
                Padding(
                  padding: const EdgeInsets.only(top: 450, left: 20),
                  child: Text(
                    'Share The Love, \nShare A Meal, \nMaking Hunger A Thing Of The Past.',
                    style: GoogleFonts.barlowSemiCondensed(
                      fontSize: 26,
                      color: Colors.black.withOpacity(0.5),
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                )
              ],
            ),
          ],
        ),
      ),
      floatingActionButton: SizedBox(
        height: 70,
        width: 200,
        child: FloatingActionButton(
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.all(
              Radius.circular(20),
            ),
          ),
          backgroundColor: Colors.black,
          elevation: 0,
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (BuildContext context) => ShowDistributor(),
              ),
            );
          },
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Padding(
                padding: EdgeInsets.only(left: 15),
                child: Text(
                  'Donate Food',
                  style: TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.w700),
                ),
              ),
              Container(
                height: 70,
                width: 80,
                decoration: const BoxDecoration(
                  color: Color(0xffCDFF01),
                  borderRadius: BorderRadius.all(
                    Radius.circular(20),
                  ),
                ),
                child: const Icon(
                  Icons.add,
                  size: 48,
                ),
              )
            ],
          ),
        ),
      ),
    );
  }
}



import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'home.dart';

class Catalog extends StatefulWidget {
  final String distributorName;

  const Catalog({Key? key, required this.distributorName}) : super(key: key);

  @override
  State<Catalog> createState() => _CatalogState();
}

class _CatalogState extends State<Catalog> with TickerProviderStateMixin {
  User? user = FirebaseAuth.instance.currentUser;
  FirebaseFirestore firestore = FirebaseFirestore.instance;
  late TabController _tabController;
  final CollectionReference item =
      FirebaseFirestore.instance.collection('required');
  final CollectionReference donations =
      FirebaseFirestore.instance.collection('donations');

  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _contributionController = TextEditingController();
  final TextEditingController _donorNameController = TextEditingController();
  final TextEditingController _donorNumberController = TextEditingController();

  String _searchLocation = "";

  // Function to show the bottom sheet
  void _showContributionBottomSheet(
      BuildContext context, Map<String, dynamic> item) {
    showModalBottomSheet(
      backgroundColor: Colors.black,
      context: context,
      builder: (context) {
        return Builder(
          builder: (context) {
            return StatefulBuilder(
              builder: (context, setState) {
                return Container(
                  height: 600,
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Name: ${item['name']}',
                        style: GoogleFonts.barlowSemiCondensed(
                          color: Colors.white,
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      Text(
                        'Quantity: ${item['quantity']}',
                        style: GoogleFonts.barlowSemiCondensed(
                          color: Colors.white,
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.only(top: 20, bottom: 10),
                        child: TextField(
                          style: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white,
                          ),
                          controller: _donorNameController,
                          keyboardType: TextInputType.text,
                          decoration: InputDecoration(
                            labelText: 'Name',
                            labelStyle: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                            ),
                            hintStyle: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.only(top: 10, bottom: 10),
                        child: TextField(
                          style: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white,
                          ),
                          controller: _donorNumberController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            labelText: 'Phone number',
                            labelStyle: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                            ),
                            hintStyle: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.only(top: 10, bottom: 20),
                        child: TextField(
                          style: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white,
                          ),
                          controller: _contributionController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            labelText: 'Contribution Quantity',
                            labelStyle: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                            ),
                            hintStyle: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                      ),
                      ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xffCDFF01),
                          elevation: 0,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        onPressed: () async {
                          // Check if any of the text fields are empty
                          if (_donorNameController.text.isEmpty ||
                              _donorNumberController.text.isEmpty ||
                              _contributionController.text.isEmpty) {
                            showDialog(
                              context: context,
                              builder: (BuildContext context) {
                                return AlertDialog(
                                  title: const Text('Warning'),
                                  content:
                                      const Text('Please fill all the fields'),
                                  actions: <Widget>[
                                    TextButton(
                                      onPressed: () {
                                        Navigator.of(context).pop();
                                      },
                                      child: const Text(
                                        'OK',
                                        style: TextStyle(color: Colors.black),
                                      ),
                                    ),
                                  ],
                                );
                              },
                            );
                            return; // Don't proceed if any field is empty
                          }

                          // Perform contribution logic here
                          int contributedQuantity =
                              int.tryParse(_contributionController.text) ?? 0;

                          int itemQuantity =
                              int.tryParse(item['quantity'].toString()) ?? 0;

                          // Update the quantity in the catalog page
                          int remainingQuantity =
                              itemQuantity - contributedQuantity;

                          if (remainingQuantity > 0) {
                            // If remaining quantity is greater than 0, update the item
                            // in the catalog with the new quantity
                            await FirebaseFirestore.instance
                                .collection('required')
                                .doc(item['id'])
                                .update({'quantity': remainingQuantity});
                          } else {
                            // If remaining quantity is 0 or less, delete the item from the catalog
                            await FirebaseFirestore.instance
                                .collection('required')
                                .doc(item['id'])
                                .delete();
                          }

                          String userId = user!.uid;
                          String currentDate = DateTime.now().toIso8601String();

                          // Store donation information in Firestore with user ID as document ID
                          await FirebaseFirestore.instance
                              .collection('donations')
                              .doc(userId)
                              .collection('userdonations')
                              .add({
                            'userId': userId,
                            'donorName': _donorNameController.text,
                            'donorNumber': _donorNumberController.text,
                            'name': item['name'],
                            'contributedQuantity': contributedQuantity,
                            'location': item['location'],
                            'date': item['dates'],
                            'timestamp': FieldValue.serverTimestamp(),
                          });

                          _contributionController.clear();
                          _donorNameController.clear();
                          _donorNumberController.clear();

                          // Close the bottom sheet
                          Navigator.pop(context);
                        },
                        child: Text(
                          'Contribute',
                          style: GoogleFonts.barlowSemiCondensed(
                            color: Colors.black,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                );
              },
            );
          },
        );
      },
    );
  }

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _tabController.addListener(_handleTabSelection);
  }

  void _handleTabSelection() {
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        backgroundColor: Colors.black,
        appBar: AppBar(
          toolbarHeight: 80,
          leading: IconButton(
            icon: const Icon(
              Icons.arrow_back,
              color: Colors.white,
            ),
            onPressed: () {
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(
                  builder: (context) => const HomeScreen(),
                ),
              );
            },
          ),
          elevation: 0,
          title: Text(
            'Hi $user',
            style: GoogleFonts.barlowSemiCondensed(
              color: const Color(0xffCDFF01),
              fontSize: 27,
              fontWeight: FontWeight.bold,
            ),
          ),
          backgroundColor: Colors.black,
          bottom: TabBar(
            labelStyle: GoogleFonts.barlowSemiCondensed(
                color: const Color(0xffCDFF01), fontWeight: FontWeight.bold),
            controller: _tabController,
            tabs: const [
              Tab(text: 'Breakfast'),
              Tab(text: 'Lunch'),
              Tab(text: 'Dinner'),
            ],
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.only(top: 10, left: 10, right: 10),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextField(
                controller: _searchController,
                style: GoogleFonts.barlowSemiCondensed(color: Colors.white),
                decoration: InputDecoration(
                  hintText: 'Enter your location...',
                  hintStyle:
                      GoogleFonts.barlowSemiCondensed(color: Colors.white),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                onChanged: (value) {
                  setState(() {
                    _searchLocation =
                        value; // Update the searchLocation variable
                  });
                },
              ),
              const SizedBox(height: 10),
              Expanded(
                child: TabBarView(
                  controller: _tabController,
                  children: [
                    _buildItemList('Breakfast'),
                    _buildItemList('Lunch'),
                    _buildItemList('Dinner'),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildItemList(String itemName) {
    return StreamBuilder(
      stream: item.orderBy('timestamp', descending: true).snapshots(),
      builder: (context, AsyncSnapshot snapshot) {
        if (snapshot.hasError) {
          return Center(
            child: Text('Some error occurred ${snapshot.error}'),
          );
        }
        if (snapshot.hasData) {
          QuerySnapshot querySnapshot = snapshot.data;
          List<QueryDocumentSnapshot> documents = querySnapshot.docs;

          List<Map<String, dynamic>> items = documents.map((e) {
            Map<String, dynamic> data = e.data() as Map<String, dynamic>;
            data['id'] = e.id; // Add the document ID to the data
            return data;
          }).toList();
          items = items.where((item) => item['name'] == itemName).toList();
          // Filter items based on the distributor name
          items = items.where((item) {
            return item['distributorName'] == widget.distributorName;
          }).toList();

          // Filter items based on the search location
          items = items.where((item) {
            return item['location']
                .toLowerCase()
                .contains(_searchLocation.toLowerCase());
          }).toList();

          if (items.isEmpty && _searchLocation.isNotEmpty) {
            Future.delayed(Duration.zero, () {
              _showNoDistributorsDialog(context);
            });
          }

          // Filter items based on whether they are today, in the future, or have passed
          items = items.where((item) {
            List<Timestamp> dates = [];
            if (item['dates'] is List<Timestamp>) {
              dates = List<Timestamp>.from(item['dates']);
            } else if (item['dates'] is String) {
              dates.add(
                Timestamp.fromDate(
                  DateTime.parse(item['dates']),
                ),
              );
            }

            return dates
                .where(
                  (date) =>
                      date.toDate().isAfter(DateTime.now()) ||
                      date.toDate().day == DateTime.now().day,
                )
                .isNotEmpty;
          }).toList();

          return ListView.builder(
            itemCount: items.length,
            itemBuilder: (context, index) {
              Map<String, dynamic> thisItem = items[index];
              List<Timestamp> dates = [];
              if (thisItem['dates'] is List<Timestamp>) {
                dates = List<Timestamp>.from(thisItem['dates']);
              } else if (thisItem['dates'] is String) {
                dates.add(
                  Timestamp.fromDate(
                    DateTime.parse(thisItem['dates']),
                  ),
                );
              }

              // Filter dates based on whether they are today, in the future, or have passed
              List<String> futureAndCurrentDates = dates
                  .where((date) =>
                      date.toDate().isAfter(DateTime.now()) ||
                      date.toDate().day == DateTime.now().day)
                  .map((date) => DateFormat('yyyy-MM-dd').format(date.toDate()))
                  .toList();

              if (futureAndCurrentDates.isNotEmpty) {
                // Display the item only if it has current or future dates
                return Padding(
                  padding: const EdgeInsets.only(bottom: 10),
                  child: Row(
                    children: [
                      // Container with logo
                      Container(
                        width: 50,
                        height: 80,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10),
                          shape: BoxShape.rectangle,
                          color: const Color(0xffCDFF01),
                        ),
                        child:
                            const Icon(Icons.restaurant, color: Colors.black),
                      ),
                      const SizedBox(width: 10),
                      // List tile
                      Container(
                        height: 80,
                        width: MediaQuery.of(context).size.width - 80,
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: Colors.white.withOpacity(0.25),
                            width: 1,
                          ),
                          borderRadius:
                              const BorderRadius.all(Radius.circular(10)),
                          color: Colors.black.withOpacity(0.07),
                        ),
                        child: ListTile(
                          horizontalTitleGap: 25,
                          titleTextStyle: GoogleFonts.barlowSemiCondensed(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                          leadingAndTrailingTextStyle:
                              GoogleFonts.barlowSemiCondensed(
                            color: Colors.white,
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                          ),
                          contentPadding: const EdgeInsets.symmetric(
                              horizontal: 10, vertical: 3),
                          title: Text(
                            'Name: ${thisItem['name']}\nNeeded quantity: ${thisItem['quantity']}',
                          ),
                          subtitle: Padding(
                            padding: const EdgeInsets.only(top: 5),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.location_on,
                                  color: Color(0xffCDFF01),
                                  size: 12,
                                ),
                                const SizedBox(width: 5),
                                Text('${thisItem['location']}'),
                              ],
                            ),
                          ),
                          subtitleTextStyle: GoogleFonts.barlowSemiCondensed(
                              color: Colors.white,
                              fontSize: 12,
                              fontWeight: FontWeight.w400),
                          trailing:
                              Text('Date: ${futureAndCurrentDates.first}'),
                          onTap: () {
                            _showContributionBottomSheet(context, thisItem);
                          },
                        ),
                      ),
                    ],
                  ),
                );
              } else {
                // If there are no current or future dates, delete the item
                // and don't display it
                _deleteItem(thisItem['id']);
                return Container();
              }
            },
          );
        }
        return Container();
      },
    );
  }

  void _deleteItem(String itemId) async {
    await FirebaseFirestore.instance
        .collection('required')
        .doc(itemId)
        .delete();
  }
}

void _showNoDistributorsDialog(BuildContext context) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text(
          'No distributors found',
          style: GoogleFonts.barlowSemiCondensed(
            color: Colors.black,
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Text(
          'No distributors are found on the selected location',
          style: GoogleFonts.barlowSemiCondensed(
            color: Colors.black,
            fontSize: 14,
            fontWeight: FontWeight.w400,
          ),
        ),
        actions: <Widget>[
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close the dialog
            },
            child: Text(
              'Cancel',
              style: GoogleFonts.barlowSemiCondensed(
                color: Colors.redAccent,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close the dialog
              // // Navigate to the charity contribution page
              // Navigator.push(
              //   context,
              //   MaterialPageRoute(
              //     builder: (context) => CharityContributionPage(),
              //   ),
              // );
            },
            child: Text(
              'Ok',
              style: GoogleFonts.barlowSemiCondensed(
                color: Colors.black,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      );
    },
  );
}
